@page "/"
@using ConsistentHashingWeb.Services
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@using System.Numerics
@inject CacheSystemService CacheSystem
@inject IJSRuntime JS

<PageTitle>Consistent Hashing Visualization</PageTitle>

<div class="container-fluid mt-3">
    <div class="row">
        <!-- Left Column: Hash Ring Visualization -->
        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Hash Ring Visualization</h5>
                    <div class="hash-ring-container">
                        <svg @ref="svgElement" class="hash-ring" viewBox="-110 -110 220 220" @onmousemove="HandleSvgMouseMove" @onclick="HandleSvgClick">
                            <!-- Client circle -->
                            <circle cx="0" cy="0" r="80" class="client-circle" />

                            <!-- Guide line -->
                            @if (showPreview)
                            {
                                <line x1="0" y1="0" x2="@previewX" y2="@previewY" class="guide-line" />
                                <circle cx="@previewX" cy="@previewY" r="3" class="preview-point" />
                            }

                            <!-- Server nodes -->
                            @foreach (var node in CacheSystem.GetVirtualNodePositions())
                            {
                                var angle = node.Position * 2 * Math.PI;
                                var x = Math.Sin(angle) * 80;
                                var y = -Math.Cos(angle) * 80;
                                <g transform="translate(@x,@y)">
                                    <circle cx="0" cy="0" r="4" class="server-node" />
                                    <text class="node-label">S@(node.Name[..3])</text>
                                </g>
                            }

                            <!-- Client nodes -->
                            @foreach (var client in CacheSystem.GetClientPositions())
                            {
                                var angle = client.Position * 2 * Math.PI;
                                var x = Math.Sin(angle) * 80;
                                var y = -Math.Cos(angle) * 80;
                                <g transform="translate(@x,@y)">
                                    <circle cx="0" cy="0" r="3" class="client-node" />
                                    <text class="node-label">C@(client.Id[..3])</text>
                                </g>
                            }
                        </svg>
                    </div>
                </div>
            </div>
        </div>

        <!-- Right Column: Controls and Info -->
        <div class="col-md-6">
            <!-- Client-Server Mappings -->
            <div class="card mb-3">
                <div class="card-body">
                    <h5 class="card-title">Client-Server Mappings</h5>
                    <div class="table-responsive" style="max-height: 200px; overflow-y: auto;">
                        <table class="table table-sm">
                            <thead>
                                <tr>
                                    <th>Client ID</th>
                                    <th>Server</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var mapping in CacheSystem.GetClientServerMappings())
                                {
                                    <tr>
                                        <td>@mapping.Key</td>
                                        <td>@mapping.Value</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <!-- Add Client -->
            <div class="card mb-3">
                <div class="card-body">
                    <div class="input-group mb-3">
                        <input type="text" class="form-control" placeholder="Enter client ID" 
                               @bind="newClientId" @bind:event="oninput" />
                        <button class="btn btn-outline-primary" type="button" @onclick="() => CacheSystem.AddClientId(newClientId)">
                            Add Client
                        </button>
                    </div>
                </div>
            </div>

            <!-- Server Status Cards -->
            <div class="row g-2">
                @foreach (var server in CacheSystem.GetAllServers())
                {
                    <div class="col-md-6">
                        <div class="card @(server.IsDown ? "bg-danger" : "bg-success") text-white">
                            <div class="card-body p-2">
                                <h6 class="card-title mb-1">@server.Name</h6>
                                <p class="card-text small mb-1">Status: @(server.IsDown ? "Down" : "Up")</p>
                                <p class="card-text small mb-1">Clients: @server.ClientIds.Count</p>
                                <button class="btn btn-warning btn-sm" @onclick="() => ToggleServer(server.Name)">
                                    @(server.IsDown ? "Bring Up" : "Shut Down")
                                </button>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<style>
    .hash-ring-container {
        width: 100%;
        padding-bottom: 100%;
        position: relative;
        max-width: 600px;
        margin: 0 auto;
        aspect-ratio: 1;
    }

    .hash-ring {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        cursor: crosshair;
        display: block;
    }
</style>

@code {
    private static readonly BigInteger MAX_HASH = BigInteger.Parse("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF", System.Globalization.NumberStyles.HexNumber);
    private string newClientId = "";
    private bool showPreview = false;
    private double previewX = 0;
    private double previewY = 0;
    private ElementReference svgElement;
    private double svgWidth = 220;
    private double svgHeight = 220;

    private class DOMRect
    {
        public double Width { get; set; }
        public double Height { get; set; }
    }

    protected override void OnInitialized()
    {
        // Initialize test configuration with two servers at opposite positions
        if (!CacheSystem.GetAllServers().Any())
        {
            // Create two servers at 1/4 and 3/4 of the hash space
            // Use exact hex values to position servers
            var server1Hash = "4000000000000000000000000000000000000000"; // 1/4 of hash space
            var server2Hash = "C000000000000000000000000000000000000000"; // 3/4 of hash space
            
            Console.WriteLine($"Server 1 hash: {server1Hash}");
            Console.WriteLine($"Server 2 hash: {server2Hash}");
            
            CacheSystem.AddServer(server1Hash);
            CacheSystem.AddServer(server2Hash);
        }

        CacheSystem.OnChange += StateHasChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var rect = await JS.InvokeAsync<DOMRect>("getBoundingClientRect", svgElement);
            svgWidth = rect.Width;
            svgHeight = rect.Height;
        }
    }

    private void HandleSvgMouseMove(MouseEventArgs e)
    {
        // Calculate the center point
        var centerX = svgWidth / 2;
        var centerY = svgHeight / 2;
        
        // Calculate relative mouse position from center
        double relativeX = e.OffsetX - centerX;
        double relativeY = e.OffsetY - centerY;
        
        // Scale to SVG coordinates (-110 to 110)
        double scale = 220.0 / Math.Min(svgWidth, svgHeight);
        double mouseX = relativeX * scale;
        double mouseY = relativeY * scale;
        
        // Calculate distance from center
        double distance = Math.Sqrt(mouseX * mouseX + mouseY * mouseY);
        
        // Only show preview when mouse is near the client circle (radius 80)
        if (Math.Abs(distance - 80) < 20)
        {
            showPreview = true;
            
            // Project the point onto the circle with radius 80
            double ratio = 80.0 / distance;
            previewX = mouseX * ratio;
            previewY = mouseY * ratio;
        }
        else
        {
            showPreview = false;
        }
        StateHasChanged();
    }

    private void HandleSvgClick(MouseEventArgs e)
    {
        if (showPreview)
        {
            // Calculate the center point
            var centerX = svgWidth / 2;
            var centerY = svgHeight / 2;
            
            // Calculate relative mouse position from center
            double relativeX = e.OffsetX - centerX;
            double relativeY = e.OffsetY - centerY;
            
            // Scale to SVG coordinates (-110 to 110)
            double scale = 220.0 / Math.Min(svgWidth, svgHeight);
            double mouseX = relativeX * scale;
            double mouseY = relativeY * scale;
            
            // Calculate angle from mouse position
            double angle = Math.Atan2(mouseX, -mouseY);
            if (angle < 0) angle += 2 * Math.PI;
            double normalizedAngle = angle / (2 * Math.PI);
            
            Console.WriteLine($"Click angle: {normalizedAngle}");
            
            // Convert angle to hash value by calculating each hex digit
            var hexDigits = "0123456789ABCDEF";
            var hashBuilder = new System.Text.StringBuilder();
            
            // Use angle to generate all 40 hex digits
            double currentPosition = normalizedAngle;
            for (int i = 0; i < 40; i++)
            {
                // Scale current position to 0-16 range
                currentPosition *= 16;
                // Get the integer part as hex digit
                int digit = (int)currentPosition;
                hashBuilder.Append(hexDigits[digit]);
                // Keep the fractional part for next iteration
                currentPosition -= digit;
            }
            
            var hash = hashBuilder.ToString();
            Console.WriteLine($"Click generated hash: {hash}");
            CacheSystem.AddClientIdAtPosition(hash, normalizedAngle);
        }
    }

    private void AddNewServer()
    {
        var serverCount = CacheSystem.GetAllServers().Count() + 1;
        CacheSystem.AddServer("Server-" + serverCount);
    }

    private void ToggleServer(string serverName)
    {
        CacheSystem.ToggleServer(serverName);
    }

    public void Dispose()
    {
        CacheSystem.OnChange -= StateHasChanged;
    }
} 